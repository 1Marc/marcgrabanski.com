---
export interface Props {
  articles: Array<{
    title: string;
    description?: string;
    date?: string;
    url: string;
    image?: string;
    tags?: string[];
  }>;
  columns?: 1 | 2 | 3 | 4;
  showImages?: boolean;
  showTags?: boolean;
  showDates?: boolean;
  class?: string;
}

const { 
  articles,
  columns = 3,
  showImages = true,
  showTags = true,
  showDates = true,
  class: className = '',
  ...rest 
} = Astro.props;

const classes = ['article-grid', `article-grid--${columns}-cols`, className].filter(Boolean).join(' ');
---

<section class={classes} {...rest}>
  {articles.map((article) => (
    <article class="article-card">
      {showImages && article.image && (
        <div class="article-image-container">
          <img src={article.image} alt={article.title} class="article-image" />
        </div>
      )}
      <div class="article-content">
        <header class="article-header">
          {showDates && article.date && (
            <time class="article-date" datetime={article.date}>
              {new Date(article.date).toLocaleDateString()}
            </time>
          )}
          <h3 class="article-title">
            <a href={article.url} class="article-link">
              {article.title}
            </a>
          </h3>
        </header>
        {article.description && (
          <p class="article-description">{article.description}</p>
        )}
        {showTags && article.tags && article.tags.length > 0 && (
          <div class="article-tags">
            {article.tags.map((tag) => (
              <span class="article-tag">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </article>
  ))}
</section>

<style>
  /* ==========================================================================
     ARTICLE GRID COMPONENT
     ========================================================================== */

  .article-grid {
    display: grid;
    gap: var(--space-8);
    width: 100%;
  }

  /* Column Variants */
  .article-grid--1-cols {
    grid-template-columns: 1fr;
  }

  .article-grid--2-cols {
    grid-template-columns: repeat(2, 1fr);
  }

  .article-grid--3-cols {
    grid-template-columns: repeat(3, 1fr);
  }

  .article-grid--4-cols {
    grid-template-columns: repeat(4, 1fr);
  }

  /* Article Card */
  .article-card {
    display: flex;
    flex-direction: column;
    background: var(--color-white);
    border-radius: var(--radius-xl);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: all var(--transition-medium);
    height: 100%;
  }

  .article-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
  }

  /* Article Image */
  .article-image-container {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .article-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-medium);
  }

  .article-card:hover .article-image {
    transform: scale(1.05);
  }

  /* Article Content */
  .article-content {
    display: flex;
    flex-direction: column;
    padding: var(--space-6);
    flex: 1;
  }

  .article-header {
    margin-bottom: var(--space-4);
  }

  .article-date {
    display: block;
    font-size: var(--font-size-sm);
    color: var(--color-text-muted);
    margin-bottom: var(--space-2);
  }

  .article-title {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    line-height: 1.3;
    margin: 0;
  }

  .article-link {
    color: var(--color-text);
    text-decoration: none;
    transition: color var(--transition-fast);
  }

  .article-link:hover {
    color: var(--color-primary);
  }

  .article-description {
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    color: var(--color-text-muted);
    margin: 0 0 var(--space-4) 0;
    flex: 1;
  }

  /* Article Tags */
  .article-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-2);
    margin-top: auto;
  }

  .article-tag {
    display: inline-block;
    padding: var(--space-1) var(--space-3);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-primary);
    background: var(--color-primary-highlight);
    border-radius: var(--radius-full);
    transition: all var(--transition-fast);
  }

  .article-tag:hover {
    background: var(--color-primary);
    color: var(--color-white);
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .article-grid--4-cols {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 1024px) {
    .article-grid--3-cols,
    .article-grid--4-cols {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .article-grid {
      gap: var(--space-6);
    }

    .article-grid--2-cols,
    .article-grid--3-cols,
    .article-grid--4-cols {
      grid-template-columns: 1fr;
    }

    .article-content {
      padding: var(--space-4);
    }

    .article-title {
      font-size: var(--font-size-base);
    }

    .article-description {
      font-size: var(--font-size-sm);
    }
  }

  @media (max-width: 480px) {
    .article-grid {
      gap: var(--space-4);
    }

    .article-content {
      padding: var(--space-3);
    }

    .article-image-container {
      height: 150px;
    }
  }

  /* Loading State */
  .article-grid.loading {
    opacity: 0.7;
    pointer-events: none;
  }

  /* Empty State */
  .article-grid:empty::after {
    content: 'No articles found';
    display: block;
    text-align: center;
    padding: var(--space-8);
    color: var(--color-text-muted);
    font-style: italic;
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: dark) {
    .article-card {
      background: var(--color-background-dark);
      border: 1px solid var(--color-border-dark);
    }

    .article-link {
      color: var(--color-text-dark);
    }

    .article-link:hover {
      color: var(--color-primary);
    }

    .article-description {
      color: var(--color-text-muted-dark);
    }

    .article-tag {
      background: var(--color-primary-highlight-dark);
      color: var(--color-primary);
    }

    .article-tag:hover {
      background: var(--color-primary);
      color: var(--color-white);
    }
  }
</style> 