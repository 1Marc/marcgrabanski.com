---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import ArticleAbstract from '../../components/ArticleAbstract.astro';
import Pagination from '../../components/Pagination.astro';
import { getCollection } from 'astro:content';
import { site } from "../../data/siteMetaData.js";

// Generate static paths for all pages
export async function getStaticPaths() {
  const allArticles = await getCollection('articles');
  const sortedArticles = allArticles.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());
  
  const articlesPerPage = 10;
  const totalPages = Math.ceil(sortedArticles.length / articlesPerPage);
  const paths: Array<{
    params: { page: string };
    props: {
      currentPage: number;
      totalPages: number;
      articles: typeof sortedArticles;
      totalArticles: number;
    };
  }> = [];
  
  // Add paginated pages (page 1, 2, 3, 4, 5, etc.)
  for (let page = 1; page <= totalPages; page++) {
    const startIndex = (page - 1) * articlesPerPage;
    const endIndex = startIndex + articlesPerPage;
    
    paths.push({
      params: { page: page.toString() },
      props: { 
        currentPage: page,
        totalPages,
        articles: sortedArticles.slice(startIndex, endIndex),
        totalArticles: sortedArticles.length
      }
    });
  }
  
  return paths;
}

const { currentPage, totalPages, articles, totalArticles } = Astro.props;
const articlesPerPage = 10;
const startIndex = (currentPage - 1) * articlesPerPage;
const endIndex = startIndex + articlesPerPage;
const articlesForCurrentPage: typeof articles = articles;

const { title } = site;
---

<Layout title={`All Articles - ${title}`}>
  <Header />
  <div class="content">
    <div class="content__inner">
      <div class="content-wrapper">
        <div class="articles-index">
          <div class="articles-header">
            <h1 class="section-title">All Articles</h1>
            <p class="articles-count">Showing {articlesForCurrentPage.length} of {totalArticles} articles</p>
          </div>
          
          <div class="articles-list">
            {articlesForCurrentPage.map(article => (
              <ArticleAbstract node={article} />
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>

  <Pagination 
    type="articles"
    currentPage={currentPage}
    totalPages={totalPages}
    startIndex={startIndex}
    endIndex={endIndex}
    totalItems={totalArticles}
  />
</Layout>

<style>
  .articles-index {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  .articles-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .articles-header .section-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: var(--color-base);
  }

  .articles-count {
    color: var(--color-gray);
    font-size: 1.125rem;
  }

  .articles-list {
    margin-bottom: 3rem;
  }

  @media (max-width: 768px) {
    .articles-header .section-title {
      font-size: 2rem;
    }
  }
</style> 